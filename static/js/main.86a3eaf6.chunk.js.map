{"version":3,"sources":["components-phonebook/list-transition.module.css","components-phonebook/phonebook-transition.module.css","components-phonebook/notification.module.css","redux/contactActions.js","redux/contactsReduser.js","redux/store.js","components-phonebook/ContactCreator.js","components-phonebook/ContactList.js","components-phonebook/Section.js","components-phonebook/FilterContact.js","components-phonebook/Notification.js","components-phonebook/Phonebook.js","App.js","index.js"],"names":["module","exports","createTask","createAction","name","number","payload","contact","id","uuidv4","removeTask","changeFilter","isNotification","getDataFromLS","JSON","parse","localStorage","getItem","createReducer","contactActions","state","action","filter","combineReducers","store","configureStore","reducer","items","contactReducer","ContactCreator","handleAddContact","target","value","setState","handleSubmit","e","props","preventDefault","some","setTimeout","onSubmit","this","className","type","required","onChange","Component","mapDispatchToProps","connect","removeContact","toLowerCase","includes","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","listTransition","onClick","Section","title","children","in","appear","phonebook","mountOnEnter","onChangeFilter","Notification","Phonebook","setItem","stringify","notificationStyles","unmountOnExit","length","FilterContact","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86a3eaf6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"list-transition_enter__tnCkk\",\"enterActive\":\"list-transition_enterActive__2Fjo8\",\"exit\":\"list-transition_exit__15t5U\",\"exitActive\":\"list-transition_exitActive__1I2q5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"phonebook-transition_appear__8uz0L\",\"appearActive\":\"phonebook-transition_appearActive__3O6AR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"notification_enter__UIyZC\",\"enterActive\":\"notification_enterActive__2ltee\",\"exit\":\"notification_exit__8tGZv\",\"exitActive\":\"notification_exitActive__2wuLT\"};","import { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\n// const createTask = (contactName, number) => ({\n//   type: \"contact/createTask\",\n//   payload: {\n//     contact: {\n//       id: uuidv4(),\n//       name: contactName,\n//       contact: number,\n//     },\n//   },\n// });\n\nconst createTask = createAction(\"contact/createTask\", (name, number) => ({\n  payload: {\n    contact: {\n      id: uuidv4(),\n      name: name,\n      contact: number,\n    },\n  },\n}));\n\n// const removeTask = (id) => ({\n//   type: \"contact/removeTask\",\n//   payload: {\n//     id,\n//   },\n// });\n\nconst removeTask = createAction(\"contact/removeTask\");\n\n// const changeFilter = (filter) => ({\n//   type: \"contact/filter\",\n//   payload: {\n//     filter,\n//   },\n// });\n\nconst changeFilter = createAction(\"contact/filter\");\n\n// const isNotification = (isNotification) => ({\n//   type: \"contact/notification\",\n//   payload: {\n//     isNotification,\n//   },\n// });\n\nconst isNotification = createAction(\"contact/notification\");\n\nexport default {\n  createTask,\n  removeTask,\n  changeFilter,\n  isNotification,\n};\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport contactActions from \"../redux/contactActions\";\n\nfunction parseLS() {\n  const savedContacts = JSON.parse(localStorage.getItem(\"contacts\"));\n  return savedContacts || [];\n}\nconst getDataFromLS = parseLS();\nconst contact = createReducer(getDataFromLS, {\n  [contactActions.createTask]: (state, action) => [\n    ...state,\n    action.payload.contact,\n  ],\n  [contactActions.removeTask]: (state, action) =>\n    state.filter((contact) => contact.id !== action.payload),\n});\n\nconst filter = createReducer(\"\", {\n  [contactActions.changeFilter]: (state, action) => action.payload,\n});\n\nconst isNotification = createReducer(false, {\n  [contactActions.isNotification]: (state, action) => action.payload,\n});\n\nexport default combineReducers({\n  contact,\n  filter,\n  isNotification,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport contactReducer from \"./contactsReduser\";\n\nconst store = configureStore({\n  reducer: {\n    items: contactReducer,\n  },\n});\n\nexport default store;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../redux/contactActions\";\n\nclass ContactCreator extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleAddContact = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (e) => {\n    const { name, number } = this.state;\n    const { createTask, items, isNotification } = this.props;\n    e.preventDefault();\n    const sameName = items.some((contact) => contact.name === name);\n    if (sameName) {\n      isNotification(true);\n      setTimeout(() => isNotification(false), 4000);\n    } else {\n      createTask(name, number);\n    }\n\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"group\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              required\n              value={this.state.name}\n              onChange={this.handleAddContact}\n            />\n            <span className=\"bar\"></span>\n            <label>Name</label>\n          </div>\n\n          <div className=\"group\">\n            <input\n              type=\"tel\"\n              name=\"number\"\n              required\n              value={this.state.number}\n              onChange={this.handleAddContact}\n            />\n            <span className=\"bar\"></span>\n            <label>Number </label>\n          </div>\n\n          <button className=\"glow-on-hover\" type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  createTask: contactActions.createTask,\n  isNotification: contactActions.isNotification,\n};\n\nconst mapStateToProps = (state) => ({\n  items: state.items.contact,\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactCreator);\n","import React from \"react\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../redux/contactActions\";\nimport listTransition from \"../components-phonebook/list-transition.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ items, removeContact }) => (\n  <TransitionGroup component=\"ul\" className=\"items\">\n    {items.map(({ id, name, contact }) => (\n      <CSSTransition key={id} timeout={400} classNames={listTransition}>\n        <li key={id} className=\"list\">\n          <div className=\"infoContact\">\n            <p>Name: {name}</p> <p>Tel. {contact}</p>\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn cross\"\n            onClick={() => removeContact(id)}\n          ></button>\n        </li>\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n\nconst mapStateToProps = (state) => ({\n  items: state.items.contact.filter((contact) =>\n    contact.name.toLowerCase().includes(state.items.filter.toLowerCase())\n  ),\n});\n\nconst mapDispatchToProps = {\n  removeContact: contactActions.removeTask,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nContactList.propTypes = {\n  items: PropTypes.array.isRequired,\n  removeContact: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition } from \"react-transition-group\";\nimport phonebook from \"./phonebook-transition.module.css\";\n\nfunction Section({ title, children }) {\n  return (\n    <section>\n      <CSSTransition\n        in={true}\n        appear={true}\n        key={title}\n        timeout={1100}\n        classNames={phonebook}\n        mountOnEnter\n      >\n        <h2>{title}</h2>\n      </CSSTransition>\n      {children}\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.node,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport contactActions from \"../redux/contactActions\";\nimport PropTypes from \"prop-types\";\nfunction filterContact({ value, onChangeFilter }) {\n  return (\n    <div className=\"group\">\n      <input\n        type=\"text\"\n        value={value}\n        required\n        onChange={(e) => onChangeFilter(e.target.value)}\n      />\n      <span className=\"bar\"></span>\n      <label>Search Contact </label>\n    </div>\n  );\n}\nconst mapDispatchToProps = {\n  onChangeFilter: contactActions.changeFilter,\n};\n\nconst mapToStateToProps = (state) => ({\n  value: state.items.filter,\n});\nexport default connect(mapToStateToProps, mapDispatchToProps)(filterContact);\n\nfilterContact.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n\nconst Notification = () => (\n  <div className=\"notifi\">\n    <p>Contact already exsist!</p>\n  </div>\n);\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport ContactCreator from \"./ContactCreator\";\nimport ContactList from \"./ContactList\";\nimport Section from \"./Section\";\nimport FilterContact from \"./FilterContact\";\nimport Notification from \"./Notification\";\nimport notificationStyles from \"./notification.module.css\";\n\nclass Phonebook extends Component {\n  componentDidUpdate() {\n    localStorage.setItem(\"contacts\", JSON.stringify(this.props.items));\n  }\n\n  render() {\n    return (\n      <>\n        <CSSTransition\n          in={this.props.isNotification}\n          classNames={notificationStyles}\n          timeout={1000}\n          unmountOnExit\n        >\n          <Notification />\n        </CSSTransition>\n\n        <Section title=\"Phonebook\">\n          <ContactCreator />\n        </Section>\n        <Section\n          title={\n            this.props.items.length > 0 ? \"Contacts\" : \"Do not have contacts\"\n          }\n        >\n          {this.props.items.length > 0 && <FilterContact />}\n\n          <ContactList />\n        </Section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  items: state.items.contact,\n  isNotification: state.items.isNotification,\n});\n\nexport default connect(mapStateToProps)(Phonebook);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport Phonebook from \"./components-phonebook/Phonebook\";\nexport default function App() {\n  return (\n    <>\n      <Provider store={store}>\n        <Phonebook />\n      </Provider>\n    </>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"../src/styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}